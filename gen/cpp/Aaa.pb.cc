// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Aaa.proto

#include "Aaa.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR SimpleMessage_HeaderItem::SimpleMessage_HeaderItem(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , value_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct SimpleMessage_HeaderItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimpleMessage_HeaderItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimpleMessage_HeaderItemDefaultTypeInternal() {}
  union {
    SimpleMessage_HeaderItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimpleMessage_HeaderItemDefaultTypeInternal _SimpleMessage_HeaderItem_default_instance_;
PROTOBUF_CONSTEXPR SimpleMessage::SimpleMessage(
    ::_pbi::ConstantInitialized)
  : headers_()
  , blob_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , id_(uint64_t{0u})
  , message_type_(0)
{}
struct SimpleMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimpleMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimpleMessageDefaultTypeInternal() {}
  union {
    SimpleMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimpleMessageDefaultTypeInternal _SimpleMessage_default_instance_;
static ::_pb::Metadata file_level_metadata_Aaa_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Aaa_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Aaa_2eproto = nullptr;

const uint32_t TableStruct_Aaa_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SimpleMessage_HeaderItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SimpleMessage_HeaderItem, name_),
  PROTOBUF_FIELD_OFFSET(::SimpleMessage_HeaderItem, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SimpleMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SimpleMessage, id_),
  PROTOBUF_FIELD_OFFSET(::SimpleMessage, message_type_),
  PROTOBUF_FIELD_OFFSET(::SimpleMessage, headers_),
  PROTOBUF_FIELD_OFFSET(::SimpleMessage, blob_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::SimpleMessage_HeaderItem)},
  { 8, -1, -1, sizeof(::SimpleMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_SimpleMessage_HeaderItem_default_instance_._instance,
  &::_SimpleMessage_default_instance_._instance,
};

const char descriptor_table_protodef_Aaa_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tAaa.proto\"\321\001\n\rSimpleMessage\022\n\n\002id\030\001 \001("
  "\004\022)\n\014message_type\030\002 \001(\0162\023.SimpleMessage."
  "Type\022*\n\007headers\030\003 \003(\0132\031.SimpleMessage.He"
  "aderItem\022\014\n\004blob\030\004 \001(\014\032)\n\nHeaderItem\022\014\n\004"
  "name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"$\n\004Type\022\t\n\005STA"
  "RT\020\000\022\010\n\004BLOB\020\001\022\007\n\003END\020\002B!Z\037example.com/p"
  "roject/protos/fizzb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Aaa_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Aaa_2eproto = {
    false, false, 266, descriptor_table_protodef_Aaa_2eproto,
    "Aaa.proto",
    &descriptor_table_Aaa_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_Aaa_2eproto::offsets,
    file_level_metadata_Aaa_2eproto, file_level_enum_descriptors_Aaa_2eproto,
    file_level_service_descriptors_Aaa_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Aaa_2eproto_getter() {
  return &descriptor_table_Aaa_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Aaa_2eproto(&descriptor_table_Aaa_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SimpleMessage_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Aaa_2eproto);
  return file_level_enum_descriptors_Aaa_2eproto[0];
}
bool SimpleMessage_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SimpleMessage_Type SimpleMessage::START;
constexpr SimpleMessage_Type SimpleMessage::BLOB;
constexpr SimpleMessage_Type SimpleMessage::END;
constexpr SimpleMessage_Type SimpleMessage::Type_MIN;
constexpr SimpleMessage_Type SimpleMessage::Type_MAX;
constexpr int SimpleMessage::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SimpleMessage_HeaderItem::_Internal {
 public:
};

SimpleMessage_HeaderItem::SimpleMessage_HeaderItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SimpleMessage.HeaderItem)
}
SimpleMessage_HeaderItem::SimpleMessage_HeaderItem(const SimpleMessage_HeaderItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SimpleMessage.HeaderItem)
}

inline void SimpleMessage_HeaderItem::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SimpleMessage_HeaderItem::~SimpleMessage_HeaderItem() {
  // @@protoc_insertion_point(destructor:SimpleMessage.HeaderItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SimpleMessage_HeaderItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  value_.Destroy();
}

void SimpleMessage_HeaderItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SimpleMessage_HeaderItem::Clear() {
// @@protoc_insertion_point(message_clear_start:SimpleMessage.HeaderItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleMessage_HeaderItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SimpleMessage.HeaderItem.name"));
        } else
          goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SimpleMessage.HeaderItem.value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimpleMessage_HeaderItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SimpleMessage.HeaderItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SimpleMessage.HeaderItem.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SimpleMessage.HeaderItem.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SimpleMessage.HeaderItem)
  return target;
}

size_t SimpleMessage_HeaderItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SimpleMessage.HeaderItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimpleMessage_HeaderItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SimpleMessage_HeaderItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimpleMessage_HeaderItem::GetClassData() const { return &_class_data_; }

void SimpleMessage_HeaderItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SimpleMessage_HeaderItem *>(to)->MergeFrom(
      static_cast<const SimpleMessage_HeaderItem &>(from));
}


void SimpleMessage_HeaderItem::MergeFrom(const SimpleMessage_HeaderItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SimpleMessage.HeaderItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleMessage_HeaderItem::CopyFrom(const SimpleMessage_HeaderItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SimpleMessage.HeaderItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleMessage_HeaderItem::IsInitialized() const {
  return true;
}

void SimpleMessage_HeaderItem::InternalSwap(SimpleMessage_HeaderItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleMessage_HeaderItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Aaa_2eproto_getter, &descriptor_table_Aaa_2eproto_once,
      file_level_metadata_Aaa_2eproto[0]);
}

// ===================================================================

class SimpleMessage::_Internal {
 public:
};

SimpleMessage::SimpleMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  headers_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SimpleMessage)
}
SimpleMessage::SimpleMessage(const SimpleMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      headers_(from.headers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  blob_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    blob_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_blob().empty()) {
    blob_.Set(from._internal_blob(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&message_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(message_type_));
  // @@protoc_insertion_point(copy_constructor:SimpleMessage)
}

inline void SimpleMessage::SharedCtor() {
blob_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  blob_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&message_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(message_type_));
}

SimpleMessage::~SimpleMessage() {
  // @@protoc_insertion_point(destructor:SimpleMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SimpleMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  blob_.Destroy();
}

void SimpleMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SimpleMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:SimpleMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  blob_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(message_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SimpleMessage.Type message_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_message_type(static_cast<::SimpleMessage_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .SimpleMessage.HeaderItem headers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes blob = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimpleMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SimpleMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // .SimpleMessage.Type message_type = 2;
  if (this->_internal_message_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_message_type(), target);
  }

  // repeated .SimpleMessage.HeaderItem headers = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_headers_size()); i < n; i++) {
    const auto& repfield = this->_internal_headers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bytes blob = 4;
  if (!this->_internal_blob().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_blob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SimpleMessage)
  return target;
}

size_t SimpleMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SimpleMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SimpleMessage.HeaderItem headers = 3;
  total_size += 1UL * this->_internal_headers_size();
  for (const auto& msg : this->headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes blob = 4;
  if (!this->_internal_blob().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blob());
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // .SimpleMessage.Type message_type = 2;
  if (this->_internal_message_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_message_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimpleMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SimpleMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimpleMessage::GetClassData() const { return &_class_data_; }

void SimpleMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SimpleMessage *>(to)->MergeFrom(
      static_cast<const SimpleMessage &>(from));
}


void SimpleMessage::MergeFrom(const SimpleMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SimpleMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  if (!from._internal_blob().empty()) {
    _internal_set_blob(from._internal_blob());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_message_type() != 0) {
    _internal_set_message_type(from._internal_message_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleMessage::CopyFrom(const SimpleMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SimpleMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleMessage::IsInitialized() const {
  return true;
}

void SimpleMessage::InternalSwap(SimpleMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  headers_.InternalSwap(&other->headers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &blob_, lhs_arena,
      &other->blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleMessage, message_type_)
      + sizeof(SimpleMessage::message_type_)
      - PROTOBUF_FIELD_OFFSET(SimpleMessage, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Aaa_2eproto_getter, &descriptor_table_Aaa_2eproto_once,
      file_level_metadata_Aaa_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SimpleMessage_HeaderItem*
Arena::CreateMaybeMessage< ::SimpleMessage_HeaderItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SimpleMessage_HeaderItem >(arena);
}
template<> PROTOBUF_NOINLINE ::SimpleMessage*
Arena::CreateMaybeMessage< ::SimpleMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SimpleMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
