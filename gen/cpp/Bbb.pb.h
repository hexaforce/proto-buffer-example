// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Bbb.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Bbb_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Bbb_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Bbb_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Bbb_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Bbb_2eproto;
class SimpleMessage;
struct SimpleMessageDefaultTypeInternal;
extern SimpleMessageDefaultTypeInternal _SimpleMessage_default_instance_;
class SimpleMessage_HeaderItem;
struct SimpleMessage_HeaderItemDefaultTypeInternal;
extern SimpleMessage_HeaderItemDefaultTypeInternal _SimpleMessage_HeaderItem_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::SimpleMessage* Arena::CreateMaybeMessage<::SimpleMessage>(Arena*);
template<> ::SimpleMessage_HeaderItem* Arena::CreateMaybeMessage<::SimpleMessage_HeaderItem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum SimpleMessage_Type : int {
  SimpleMessage_Type_START = 0,
  SimpleMessage_Type_BLOB = 1,
  SimpleMessage_Type_END = 2,
  SimpleMessage_Type_SimpleMessage_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SimpleMessage_Type_SimpleMessage_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SimpleMessage_Type_IsValid(int value);
constexpr SimpleMessage_Type SimpleMessage_Type_Type_MIN = SimpleMessage_Type_START;
constexpr SimpleMessage_Type SimpleMessage_Type_Type_MAX = SimpleMessage_Type_END;
constexpr int SimpleMessage_Type_Type_ARRAYSIZE = SimpleMessage_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SimpleMessage_Type_descriptor();
template<typename T>
inline const std::string& SimpleMessage_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SimpleMessage_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SimpleMessage_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SimpleMessage_Type_descriptor(), enum_t_value);
}
inline bool SimpleMessage_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SimpleMessage_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SimpleMessage_Type>(
    SimpleMessage_Type_descriptor(), name, value);
}
// ===================================================================

class SimpleMessage_HeaderItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SimpleMessage.HeaderItem) */ {
 public:
  inline SimpleMessage_HeaderItem() : SimpleMessage_HeaderItem(nullptr) {}
  ~SimpleMessage_HeaderItem() override;
  explicit PROTOBUF_CONSTEXPR SimpleMessage_HeaderItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimpleMessage_HeaderItem(const SimpleMessage_HeaderItem& from);
  SimpleMessage_HeaderItem(SimpleMessage_HeaderItem&& from) noexcept
    : SimpleMessage_HeaderItem() {
    *this = ::std::move(from);
  }

  inline SimpleMessage_HeaderItem& operator=(const SimpleMessage_HeaderItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleMessage_HeaderItem& operator=(SimpleMessage_HeaderItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimpleMessage_HeaderItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimpleMessage_HeaderItem* internal_default_instance() {
    return reinterpret_cast<const SimpleMessage_HeaderItem*>(
               &_SimpleMessage_HeaderItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SimpleMessage_HeaderItem& a, SimpleMessage_HeaderItem& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleMessage_HeaderItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleMessage_HeaderItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleMessage_HeaderItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimpleMessage_HeaderItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimpleMessage_HeaderItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SimpleMessage_HeaderItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleMessage_HeaderItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SimpleMessage.HeaderItem";
  }
  protected:
  explicit SimpleMessage_HeaderItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:SimpleMessage.HeaderItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Bbb_2eproto;
};
// -------------------------------------------------------------------

class SimpleMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SimpleMessage) */ {
 public:
  inline SimpleMessage() : SimpleMessage(nullptr) {}
  ~SimpleMessage() override;
  explicit PROTOBUF_CONSTEXPR SimpleMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimpleMessage(const SimpleMessage& from);
  SimpleMessage(SimpleMessage&& from) noexcept
    : SimpleMessage() {
    *this = ::std::move(from);
  }

  inline SimpleMessage& operator=(const SimpleMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleMessage& operator=(SimpleMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimpleMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimpleMessage* internal_default_instance() {
    return reinterpret_cast<const SimpleMessage*>(
               &_SimpleMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SimpleMessage& a, SimpleMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimpleMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimpleMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SimpleMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SimpleMessage";
  }
  protected:
  explicit SimpleMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SimpleMessage_HeaderItem HeaderItem;

  typedef SimpleMessage_Type Type;
  static constexpr Type START =
    SimpleMessage_Type_START;
  static constexpr Type BLOB =
    SimpleMessage_Type_BLOB;
  static constexpr Type END =
    SimpleMessage_Type_END;
  static inline bool Type_IsValid(int value) {
    return SimpleMessage_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    SimpleMessage_Type_Type_MIN;
  static constexpr Type Type_MAX =
    SimpleMessage_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    SimpleMessage_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return SimpleMessage_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return SimpleMessage_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return SimpleMessage_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 3,
    kBlobFieldNumber = 4,
    kIdFieldNumber = 1,
    kMessageTypeFieldNumber = 2,
  };
  // repeated .SimpleMessage.HeaderItem headers = 3;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  ::SimpleMessage_HeaderItem* mutable_headers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimpleMessage_HeaderItem >*
      mutable_headers();
  private:
  const ::SimpleMessage_HeaderItem& _internal_headers(int index) const;
  ::SimpleMessage_HeaderItem* _internal_add_headers();
  public:
  const ::SimpleMessage_HeaderItem& headers(int index) const;
  ::SimpleMessage_HeaderItem* add_headers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimpleMessage_HeaderItem >&
      headers() const;

  // bytes blob = 4;
  void clear_blob();
  const std::string& blob() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_blob(ArgT0&& arg0, ArgT... args);
  std::string* mutable_blob();
  PROTOBUF_NODISCARD std::string* release_blob();
  void set_allocated_blob(std::string* blob);
  private:
  const std::string& _internal_blob() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_blob(const std::string& value);
  std::string* _internal_mutable_blob();
  public:

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // .SimpleMessage.Type message_type = 2;
  void clear_message_type();
  ::SimpleMessage_Type message_type() const;
  void set_message_type(::SimpleMessage_Type value);
  private:
  ::SimpleMessage_Type _internal_message_type() const;
  void _internal_set_message_type(::SimpleMessage_Type value);
  public:

  // @@protoc_insertion_point(class_scope:SimpleMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimpleMessage_HeaderItem > headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blob_;
  uint64_t id_;
  int message_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Bbb_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SimpleMessage_HeaderItem

// string name = 1;
inline void SimpleMessage_HeaderItem::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SimpleMessage_HeaderItem::name() const {
  // @@protoc_insertion_point(field_get:SimpleMessage.HeaderItem.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimpleMessage_HeaderItem::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SimpleMessage.HeaderItem.name)
}
inline std::string* SimpleMessage_HeaderItem::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:SimpleMessage.HeaderItem.name)
  return _s;
}
inline const std::string& SimpleMessage_HeaderItem::_internal_name() const {
  return name_.Get();
}
inline void SimpleMessage_HeaderItem::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* SimpleMessage_HeaderItem::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* SimpleMessage_HeaderItem::release_name() {
  // @@protoc_insertion_point(field_release:SimpleMessage.HeaderItem.name)
  return name_.Release();
}
inline void SimpleMessage_HeaderItem::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SimpleMessage.HeaderItem.name)
}

// string value = 2;
inline void SimpleMessage_HeaderItem::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& SimpleMessage_HeaderItem::value() const {
  // @@protoc_insertion_point(field_get:SimpleMessage.HeaderItem.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimpleMessage_HeaderItem::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SimpleMessage.HeaderItem.value)
}
inline std::string* SimpleMessage_HeaderItem::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:SimpleMessage.HeaderItem.value)
  return _s;
}
inline const std::string& SimpleMessage_HeaderItem::_internal_value() const {
  return value_.Get();
}
inline void SimpleMessage_HeaderItem::_internal_set_value(const std::string& value) {
  
  value_.Set(value, GetArenaForAllocation());
}
inline std::string* SimpleMessage_HeaderItem::_internal_mutable_value() {
  
  return value_.Mutable(GetArenaForAllocation());
}
inline std::string* SimpleMessage_HeaderItem::release_value() {
  // @@protoc_insertion_point(field_release:SimpleMessage.HeaderItem.value)
  return value_.Release();
}
inline void SimpleMessage_HeaderItem::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SimpleMessage.HeaderItem.value)
}

// -------------------------------------------------------------------

// SimpleMessage

// uint64 id = 1;
inline void SimpleMessage::clear_id() {
  id_ = uint64_t{0u};
}
inline uint64_t SimpleMessage::_internal_id() const {
  return id_;
}
inline uint64_t SimpleMessage::id() const {
  // @@protoc_insertion_point(field_get:SimpleMessage.id)
  return _internal_id();
}
inline void SimpleMessage::_internal_set_id(uint64_t value) {
  
  id_ = value;
}
inline void SimpleMessage::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SimpleMessage.id)
}

// .SimpleMessage.Type message_type = 2;
inline void SimpleMessage::clear_message_type() {
  message_type_ = 0;
}
inline ::SimpleMessage_Type SimpleMessage::_internal_message_type() const {
  return static_cast< ::SimpleMessage_Type >(message_type_);
}
inline ::SimpleMessage_Type SimpleMessage::message_type() const {
  // @@protoc_insertion_point(field_get:SimpleMessage.message_type)
  return _internal_message_type();
}
inline void SimpleMessage::_internal_set_message_type(::SimpleMessage_Type value) {
  
  message_type_ = value;
}
inline void SimpleMessage::set_message_type(::SimpleMessage_Type value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:SimpleMessage.message_type)
}

// repeated .SimpleMessage.HeaderItem headers = 3;
inline int SimpleMessage::_internal_headers_size() const {
  return headers_.size();
}
inline int SimpleMessage::headers_size() const {
  return _internal_headers_size();
}
inline void SimpleMessage::clear_headers() {
  headers_.Clear();
}
inline ::SimpleMessage_HeaderItem* SimpleMessage::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:SimpleMessage.headers)
  return headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimpleMessage_HeaderItem >*
SimpleMessage::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:SimpleMessage.headers)
  return &headers_;
}
inline const ::SimpleMessage_HeaderItem& SimpleMessage::_internal_headers(int index) const {
  return headers_.Get(index);
}
inline const ::SimpleMessage_HeaderItem& SimpleMessage::headers(int index) const {
  // @@protoc_insertion_point(field_get:SimpleMessage.headers)
  return _internal_headers(index);
}
inline ::SimpleMessage_HeaderItem* SimpleMessage::_internal_add_headers() {
  return headers_.Add();
}
inline ::SimpleMessage_HeaderItem* SimpleMessage::add_headers() {
  ::SimpleMessage_HeaderItem* _add = _internal_add_headers();
  // @@protoc_insertion_point(field_add:SimpleMessage.headers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimpleMessage_HeaderItem >&
SimpleMessage::headers() const {
  // @@protoc_insertion_point(field_list:SimpleMessage.headers)
  return headers_;
}

// bytes blob = 4;
inline void SimpleMessage::clear_blob() {
  blob_.ClearToEmpty();
}
inline const std::string& SimpleMessage::blob() const {
  // @@protoc_insertion_point(field_get:SimpleMessage.blob)
  return _internal_blob();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimpleMessage::set_blob(ArgT0&& arg0, ArgT... args) {
 
 blob_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SimpleMessage.blob)
}
inline std::string* SimpleMessage::mutable_blob() {
  std::string* _s = _internal_mutable_blob();
  // @@protoc_insertion_point(field_mutable:SimpleMessage.blob)
  return _s;
}
inline const std::string& SimpleMessage::_internal_blob() const {
  return blob_.Get();
}
inline void SimpleMessage::_internal_set_blob(const std::string& value) {
  
  blob_.Set(value, GetArenaForAllocation());
}
inline std::string* SimpleMessage::_internal_mutable_blob() {
  
  return blob_.Mutable(GetArenaForAllocation());
}
inline std::string* SimpleMessage::release_blob() {
  // @@protoc_insertion_point(field_release:SimpleMessage.blob)
  return blob_.Release();
}
inline void SimpleMessage::set_allocated_blob(std::string* blob) {
  if (blob != nullptr) {
    
  } else {
    
  }
  blob_.SetAllocated(blob, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (blob_.IsDefault()) {
    blob_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SimpleMessage.blob)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SimpleMessage_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SimpleMessage_Type>() {
  return ::SimpleMessage_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Bbb_2eproto
